<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>两进制入门杂谈</title>
    <link href="/2024/12/27/%E4%B8%A4%E8%BF%9B%E5%88%B6%E5%85%A5%E9%97%A8%E6%9D%82%E8%B0%88/"/>
    <url>/2024/12/27/%E4%B8%A4%E8%BF%9B%E5%88%B6%E5%85%A5%E9%97%A8%E6%9D%82%E8%B0%88/</url>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>作为一个两进制新人  毅然决定开始动手写这一篇文章  内容或许(一定)不完善  也会有很多问题  但是更能以一个新人的角度来看待问题  把我(们)曾经踩过的坑复现出来  同时在两进制的主要方向–pwn&#x2F;re的新手部分我都有部分涉及(指AK入门指北)  希望能够帮到大家  同时也算是复习这些知识</p><p>这篇文章将会以一个新手的角度从零开始到至少能在校级比赛上能有输出(<del>指公众号签到</del>)  同时会借鉴大量的我曾看过的文章和大牛博客  以及两进制大家庭各位的帮助</p><h1 id="0x00-Oops"><a href="#0x00-Oops" class="headerlink" title="0x00  Oops!!!"></a>0x00  Oops!!!</h1><p>实话说  这一章是后来才开始写的  主要灵感来源于学长的小趣闻(<del>指期末答辩考察ELF的意义</del>)  突然想起刚进入这个赛道的我的迷茫感  所以  以下对一些常用简称&#x2F;术语进行简介  在之后文章撰写中如果有更多术语会再进行补充:</p><table><thead><tr><th align="center">简称</th><th align="center">全称</th><th align="center">简介</th></tr></thead><tbody><tr><td align="center">CTF</td><td align="center">Capture The Flag</td><td align="center">夺旗赛,从题目中获得flag</td></tr><tr><td align="center">flag</td><td align="center">-</td><td align="center">你的目标  类似于KEPER{Th1s_i4_fak3_fl@g}(前缀+{}+内容)</td></tr><tr><td align="center">RE</td><td align="center">Reverse</td><td align="center">逆向工程,二进制的一部分</td></tr><tr><td align="center">PWN</td><td align="center">发音类似“砰”，是指攻破设备或者系统</td><td align="center">系统&#x2F;硬件破解,希望成为电视&#x2F;电影中的hacker吗,来跟命令行玩玩吧</td></tr><tr><td align="center">IOT</td><td align="center">Internet of Things</td><td align="center">物联网工程,同样也是二进制学习一部分</td></tr><tr><td align="center">MISC</td><td align="center">miscellaneous</td><td align="center">杂项,简称对脑洞or工具利用题(bushi),两进制刷分好帮手</td></tr><tr><td align="center">Crypto</td><td align="center">Cryptography</td><td align="center">密码学,数学佬狂喜</td></tr><tr><td align="center">WEB</td><td align="center">website</td><td align="center">网站破解,尾部佬YYDS,装逼慎用cmd,请使用F12</td></tr><tr><td align="center">wp</td><td align="center">writeup</td><td align="center">解题思路，题目解题过程的记录,最好分类整理以便填充博客(悲)</td></tr><tr><td align="center">pl</td><td align="center">playload</td><td align="center">（有效攻击负载）是包含在你用于一次漏洞利用中的主要功能代码  pwn✌的调试之路才刚刚开始</td></tr><tr><td align="center">shellcode</td><td align="center">-</td><td align="center">可提权代码(🈲<em>shell</em>craft )</td></tr><tr><td align="center">EXP</td><td align="center">Exploit</td><td align="center">利用，指利用系统漏洞进行攻击的动作</td></tr><tr><td align="center">AK</td><td align="center">all kill</td><td align="center">某一类型题目或者全部题目都被解出  并非AK-47</td></tr><tr><td align="center">一血</td><td align="center">first blood</td><td align="center">通常指比赛中最先得分&#x2F;解出某题  建议double kill</td></tr><tr><td align="center">py</td><td align="center">-</td><td align="center">指比赛中通过非解题手段，从其他渠道或选手处违规获得flag或解题提示(那还能怎么办  某大厂黄色软件一把梭呗)</td></tr></tbody></table><h1 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h1><p>刚开始两进制只需要了解re&#x2F;pwn</p><h2 id="什么是逆向工程-RE"><a href="#什么是逆向工程-RE" class="headerlink" title="什么是逆向工程 (RE)"></a>什么是逆向工程 (RE)</h2><blockquote><p>​《逆向工程》是你即将体验的一款开放世界冒险游戏。该游戏秉持着根据已有的东西和结果，通过分析 来推导出具体的实现方法，包括但不限于：编译后的二进制程序、汇编代码分析、甚至是编译前的代码分析。 游戏设定在一个名为“调试器”的真实工具中，你将扮演一位名为“逆向人”的角色，在自由的代码执行中邂逅 性格各异、能力独特的指令、特性们，与他们一起拿下CTF比赛，找回失散的flag，同时逐步发掘“二进制”的 真相。 </p><p>​本文讲解的是狭义逆向工程（偏向于CTF比赛），你需要深入分析代码片段&#x2F;二进制文件，获取其中加密 后的一段flag文本并提交到比赛平台，就算你过关! 一般来说，比赛主办方都会给你一个exe(win下的可执行文件)&#x2F;elf(linux下的可执行文件)，还有的会直 接给你.asm(汇编语言文件)或者apk(手机安装包文件)，甚至更离谱的，scratch编程工具的代码文件，不常 见架构的程序（riscv、甚至是上世纪的红白机的文件），你需要有正确的思考能力和肝能力，从史山代码中 提取珠宝，定位正确的地点，从而解决这个问题。</p></blockquote><p>–摘录自2024moectf入门文档</p><h2 id="什么是PWN"><a href="#什么是PWN" class="headerlink" title="什么是PWN"></a>什么是PWN</h2><blockquote><p>Pwn（读作“砰”，拟声词）⼀词起源于⽹络游戏社区，原本表⽰成功⼊侵了计算机系统，在  CTF 中则是⼀种题⽬⽅向：通过构造恶意输⼊达到泄漏信息甚⾄劫持⼏乎整个系统 （getshell）的⽬的。其实在 CTF ⽐赛发展初期，赛题通常只与⼆进制安全相关，因此  Pwn 是 CTF 领域最原始的⽅向。</p></blockquote><p>–摘录自2024moectf入门文档</p><h1 id="PWN-0x01"><a href="#PWN-0x01" class="headerlink" title="PWN-0x01"></a>PWN-0x01</h1><p>解锁本部分请先完成:</p><p>基础:C语言基础  IDA使用基础  简单汇编基础  栈基本了解  pwntools</p><p><strong>以下内容均建立在对基础知识有所了解的情况下展开  请善用搜索引擎</strong></p><p>在开始整个部分之前  我们先来看一段代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> input;<br><span class="hljs-built_in">scanf_s</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;input);<br><span class="hljs-keyword">if</span> (input == <span class="hljs-number">666</span>)<br>&#123;<br>a = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (a == <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;flag is:FLAG&#123;@Y@S_i5_G0od_R1ght?&#125;&quot;</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;maybe you can&#x27;t good&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>猜数字就给flag  看起来很简单  我们使用IDA打开这段代码编译得到的程序</p><p>main函数长这样:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs csharp">__int64 __<span class="hljs-function">fastcall <span class="hljs-title">main</span>()</span><br>&#123;<br>  <span class="hljs-built_in">char</span> *v0; <span class="hljs-comment">// rdi</span><br>  __int64 i; <span class="hljs-comment">// rcx</span><br>  <span class="hljs-built_in">char</span> v3; <span class="hljs-comment">// [rsp+20h] [rbp+0h] BYREF</span><br>  <span class="hljs-built_in">int</span> v4; <span class="hljs-comment">// [rsp+24h] [rbp+4h]</span><br>  <span class="hljs-built_in">int</span> v5[<span class="hljs-number">53</span>]; <span class="hljs-comment">// [rsp+44h] [rbp+24h] BYREF</span><br><br>  v0 = &amp;v3;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">18</span>i64; i; --i )<br>  &#123;<br>    *(_DWORD *)v0 = <span class="hljs-number">-858993460</span>;<br>    v0 += <span class="hljs-number">4</span>;<br>  &#125;<br>  <br>  <span class="hljs-comment">//这里是内存空间初始化  不管</span><br>  <br>  j___CheckForDebuggerJustMyCode(&amp;_EBC19AA6_FileName_cpp);<br>  <br>  <span class="hljs-comment">//调试器检测  不管</span><br>  <br>  <br>  <span class="hljs-comment">//以下为主要部分</span><br>  v4 = <span class="hljs-number">0</span>;<br>  j_scanf_s(<span class="hljs-string">&quot;%d&quot;</span>, v5);<br>  <span class="hljs-keyword">if</span> ( v5[<span class="hljs-number">0</span>] == <span class="hljs-number">666</span> )<br>    v4 = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">if</span> ( v4 == <span class="hljs-number">1</span> )<br>    j_printf(<span class="hljs-string">&quot;flag is:FLAG&#123;@Y@S_i5_G0od_R1ght?&#125;&quot;</span>);<br>  j_printf(<span class="hljs-string">&quot;maybe you can&#x27;t good&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>i64;<br>&#125;<br></code></pre></td></tr></table></figure><p>很简单对吧  但是如果我就是逆天  我不想输数字  我就想让程序输出flag  那我们来尝试一种很新的办法</p><p>看汇编(这是二进制必修课  得多看)</p><p><img src="https://raw.githubusercontent.com/QYQS1/picture/main/test/202412302222501.png" alt="QQ_1735568080338"></p><p> <strong>这里我提供的是完全没必要的方法  只是为了进行引入而已  实际问题请勿模仿</strong></p><p>我们施展一点小技巧(以后会写的)</p><p><img src="https://raw.githubusercontent.com/QYQS1/picture/main/test/202412302225340.png" alt="QQ_1735568745881"></p><p>当我们再次运行时会直接jmp(无条件跳转)到loc_1400119EC也就是输出flag的地方  </p><p>实际上  我们这里的想法就是  更改字节码  设置了一个jmp到达指定地址  来实现了任意地址跳转(该行中E9代表长跳转jmp 后跟相对偏移  不细细展开  re部分会提到) 如果到这里为止你都没有问题  那么恭喜你  你成功领悟到了Inline hook的真谛(开个玩笑  当然对这个名词会很陌生  同样是re部分的内容)</p><p>运行实例(跳过了输入部分):</p><p><img src="https://raw.githubusercontent.com/QYQS1/picture/main/test/202412302228606.png" alt="QQ_1735568895751"></p><p>我们成功跳过了输入部分 并且得到了flag</p><p><strong>这里其实是完全大费周章的操作  并且似乎与pwn没有任何关系</strong>  </p><p>那我们再思考一下以下代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fuc</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (a == <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;flag is:FLAG&#123;@Y@S_i5_G0od_R1ght?&#125;&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> input;<br><span class="hljs-built_in">scanf_s</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;input);<br><span class="hljs-keyword">if</span> (input == <span class="hljs-number">666</span>)<br>&#123;<br>a = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-built_in">fuc</span>(a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;maybe you can&#x27;t good&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>基本实现没有变化  只是拆成了两个函数  那么在IDA里的体现应该是什么呢?</p><p>main函数:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs csharp">__int64 __<span class="hljs-function">fastcall <span class="hljs-title">main</span>()</span><br>&#123;<br>  <span class="hljs-built_in">char</span> *v0; <span class="hljs-comment">// rdi</span><br>  __int64 i; <span class="hljs-comment">// rcx</span><br>  <span class="hljs-built_in">char</span> v3; <span class="hljs-comment">// [rsp+20h] [rbp+0h] BYREF</span><br>  <span class="hljs-built_in">int</span> a; <span class="hljs-comment">// [rsp+24h] [rbp+4h]</span><br>  <span class="hljs-built_in">int</span> v5[<span class="hljs-number">53</span>]; <span class="hljs-comment">// [rsp+44h] [rbp+24h] BYREF</span><br><br>  v0 = &amp;v3;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">18</span>i64; i; --i )<br>  &#123;<br>    *(_DWORD *)v0 = <span class="hljs-number">-858993460</span>;<br>    v0 += <span class="hljs-number">4</span>;<br>  &#125;<br>  j___CheckForDebuggerJustMyCode(&amp;_EBC19AA6_FileName_cpp);<br>  <br> <span class="hljs-comment">//以下为正文部分:</span><br>  a = <span class="hljs-number">0</span>;<br>  j_scanf_s(<span class="hljs-string">&quot;%d&quot;</span>, v5);<br>  <span class="hljs-keyword">if</span> ( v5[<span class="hljs-number">0</span>] == <span class="hljs-number">666</span> )<br>    a = <span class="hljs-number">1</span>;<br>  fuc(a);<br>  j_printf(<span class="hljs-string">&quot;maybe you can&#x27;t good&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>i64;<br>&#125;<br></code></pre></td></tr></table></figure><p>区别无非就是main函数里多了个fuc函数的调用  那么如果按照刚刚的思路  我们只需要同样的构造jmp+地址的形式就能实现任意跳转</p><p>读到这里  实际上你已经对<strong>ret2text</strong>有部分了解了  或许你很迷茫  什么是ret2text  那么接着往下看</p><p>事实上  以上所有的操作都是基于本地运行  我们拥有源代码并能随意改写得到的结果  但是在pwn题中都是远程环境  执行的都是远程环境中的程序  就算我们在本地修改了jmp  在远程环境中也不会有任何作用  那么我们之前大费周章的讲那么多都是没用的吗？？ </p><p>其实不然  对基础的ret2text题目来说你会发现几个与刚刚例子中相同的特点</p><p>请仔细回忆刚刚的程序  我们的目标就是需要程序输出flag  需要输出的flag以及”printf”语句不是我们用户写出来的吧  而是程序已经给出的  尤其是像第二个例子  那么在pwn题目中  <strong>大部分</strong>时候我们的目标是打开一个shell 那么打开这个shell的操作也应当是程序中给出的</p><p>所以:</p><p><strong>1.题目中给出了backdoor(例如第二个程序中的fuc()函数,或是pwn题中给的一个从未被调用但是能打开shell的函数)</strong></p><p>第一点中我提到了  shell打开的函数是从未被调用的  那么我们应该怎么样去打开这个shell呢</p><p>实际上我们只需要调用这个backdoor函数  我们应该如何调用呢  没错  像刚刚的第二个示例一样  我们只需要jmp到目标函数所在地址(例如第二个程序的fuc所在地址)</p><p><strong>2.目标:jmp到能打开shell或是cat flag的函数</strong></p><p>问题又来了  我们刚刚说过了  题目是在远程环境运行的  根本不能像我们刚刚那样自己写一个jmp上去  所以我们需要利用程序中现有的”jmp”指令</p><p>让我们来猜猜为什么这个方法要叫ret2text(ret to text)</p><p>text实际上指的是text段  指的是程序中已经定义好的代码  也就是我们的第一点  题目给出了定义好的backdoor函数</p><p>ret呢</p><p>熟悉汇编的小伙伴都知道</p><p>通过一种<strong>不严谨</strong>的方式来说</p><p>ret&#x3D;pop+jmp</p><p>以第二个程序为例</p><p>当main函数调用fuc函数时  会将下一条指令的返回地址压入栈中  而ret可以视为rip&#x3D;返回地址+jmp到rip所指向的地址</p><p>这里似乎凑齐了我们需要的剩下两个要素</p><p><strong>3.ret+控制返回地址</strong></p><p>基于以上三点  我们似乎就能够完成调用backdoor函数的任务了  我们的目标就是在ret时返回的是我们所指定的返回地址就好了</p><p>想要控制返回地址  我们就需要用到栈溢出原理</p><p><strong>(以下内容请学习栈,栈帧的结构后食用)</strong></p><p>我们刚刚提到过  返回地址在调用函数时会被压入栈中我们只需要控制栈就能控制返回地址</p><p>栈上有些什么呢??  排放顺序如何呢??</p><p><strong>思考ing</strong></p><p>从一个栈帧看起 从高地址向低地址(rbp–&gt;rsp)依次是返回地址+旧的rbp值+局部变量</p><p>如果我们通过写入很长很长的局部变量  计算好偏移  就能覆盖到返回地址处  就实现了所谓的ret2text(无保护情况下)</p><p>理论形成  实践开始  公式题真能秒</p><p>看题  </p><p><strong>例如2024极客大挑战题目:你会栈溢出吗</strong></p><p>开始套公式</p><p>1.寻找backdoor–查看函数表</p><p><img src="https://raw.githubusercontent.com/QYQS1/picture/main/test/202412302333983.png" alt="QQ_1735572788188"></p><p>顺着main函数看逻辑 只有key函数未被调用 并且key函数内容为</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">__int64</span> <span class="hljs-function"><span class="hljs-title">key</span>()</span><br>&#123;<br>  <span class="hljs-function"><span class="hljs-title">printf</span>(<span class="hljs-string">&quot;yes,yes,this is key.you can catch me?&quot;</span>);</span><br><span class="hljs-function">  <span class="hljs-title">system</span>(<span class="hljs-string">&quot;/bin/sh&quot;</span>);</span><br><span class="hljs-function">  <span class="hljs-variable">return</span> <span class="hljs-number">0</span><span class="hljs-variable">LL</span>;</span><br><span class="hljs-function">&#125;</span><br></code></pre></td></tr></table></figure><p>打开了一个shell,完美符合第一点</p><p>接下来我们就要控制返回地址  就需要寻找溢出点</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scss">int <span class="hljs-built_in">welcome</span>()<br>&#123;<br>  char v1<span class="hljs-selector-attr">[12]</span>; <span class="hljs-comment">// [rsp+4h] [rbp-Ch] BYREF</span><br><br>  <span class="hljs-built_in">puts</span>(&quot;Welcome to geek,what&#x27;s you name?&quot;);<br>  <span class="hljs-built_in">gets</span>(v1);<br>  return <span class="hljs-built_in">printf</span>(&quot;hello,%s\nDo you know key?&quot;, v1);<br>&#125;<br></code></pre></td></tr></table></figure><p>welcome函数中很明显的危险函数gets</p><p>gets在读取数据时是不会检查长度的   能写入很长很长的数据来覆盖到返回地址  套公式成功</p><p>接下来就是算偏移 这个函数只有一个局部变量 v1数组  大小为12</p><p>那么此时该函数的栈帧组成为返回地址+8字节的旧rbp值+12字节的数组空间</p><p>所以我们需要输入的数据为12+8+返回地址就能解决该题</p><p>但是返回地址我们并不能手动输入进去  因为会被解释为字符串而不是字节  所以我们需要用到pwntools库</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">from</span> pwn import *<br><span class="hljs-keyword">a</span>=remote(<span class="hljs-string">&quot;nc1.ctfplus.cn&quot;</span>,<span class="hljs-number">47014</span>)<br><span class="hljs-keyword">a</span>.recvline()<br>payload=b<span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">12</span>+<span class="hljs-number">8</span>)+p64(<span class="hljs-number">0x40073D</span>)<br><span class="hljs-keyword">a</span>.sendline(payload)<br><span class="hljs-keyword">a</span>.interactive()<br></code></pre></td></tr></table></figure><p>a.interactive()来获取交互 因为此时你已经打开了一个shell  你就能得到flag了</p><p>(未完待续….)</p>]]></content>
    
    
    <categories>
      
      <category>教程(bushi)</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二进制</tag>
      
      <tag>伪教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PE文件结构</title>
    <link href="/2024/12/24/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/"/>
    <url>/2024/12/24/PE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><blockquote><p>(图片未加载请使用科学上网)</p></blockquote><h1 id="PE文件结构"><a href="#PE文件结构" class="headerlink" title="PE文件结构"></a>PE文件结构</h1><blockquote><p>PE（Portable Execute）文件是Windows下可执行文件的总称，常见的有DLL，EXE，OCX，SYS等</p></blockquote><p>一般来说  PE文件结构依次为DOS头,NT头,节表,以及各种节</p><p>PE 结构是由<strong>若干个复杂的结构体组合</strong>而成的，不是单单的一个结构体那么简单，它的结构就像文件系统的结构是由多个结构体组成的。</p><p><img src="https://raw.githubusercontent.com/QYQS1/picture/main/test/202412062020292.png" alt="fb8ac66be60f0bcc6b81d1566c2fd371_2508687-20211118234239741-787510298"></p><h2 id="1-1-DOS头"><a href="#1-1-DOS头" class="headerlink" title="1.1 DOS头"></a>1.1 DOS头</h2><p>DOS头由两部分组成：DOS MZ文件头和DOS块。</p><p>DOS头是一个结构体  <strong>16位</strong>的程序标准情况如下:</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs elm">typedef struct _IMAGE_DOS_HEADER &#123;      // <span class="hljs-type">DOS</span> .<span class="hljs-type">EXE</span> 头部<br>    <span class="hljs-type">WORD</span>   e_magic;                     // 魔术数字<br>    <span class="hljs-type">WORD</span>   e_cblp;                      // 文件最后一页的字节数<br>    <span class="hljs-type">WORD</span>   e_cp;                        // 文件中的页数<br>    <span class="hljs-type">WORD</span>   e_crlc;                      // 重定位数量<br>    <span class="hljs-type">WORD</span>   e_cparhdr;                   // 头部大小（以段为单位）<br>    <span class="hljs-type">WORD</span>   e_minalloc;                  // 所需的最小附加段数<br>    <span class="hljs-type">WORD</span>   e_maxalloc;                  // 所需的最大附加段数<br>    <span class="hljs-type">WORD</span>   e_ss;                        // 初始 <span class="hljs-type">SS</span>（堆栈段寄存器）值<br>    <span class="hljs-type">WORD</span>   e_sp;                        // 初始 <span class="hljs-type">SP</span>（堆栈指针寄存器）值<br>    <span class="hljs-type">WORD</span>   e_csum;                      // 校验和<br>    <span class="hljs-type">WORD</span>   e_ip;                        // 初始 <span class="hljs-type">IP</span>（指令指针寄存器）值<br>    <span class="hljs-type">WORD</span>   e_cs;                        // 初始 <span class="hljs-type">CS</span>（代码段寄存器）值<br>    <span class="hljs-type">WORD</span>   e_lfarlc;                    // 重定位表在文件中的地址<br>    <span class="hljs-type">WORD</span>   e_ovno;                      // 覆盖号<br>    <span class="hljs-type">WORD</span>   e_res[4];                    // 保留字段（4个字）<br>    <span class="hljs-type">WORD</span>   e_oemid;                     // <span class="hljs-type">OEM</span>标识符（用于e_oeminfo）<br>    <span class="hljs-type">WORD</span>   e_oeminfo;                   // <span class="hljs-type">OEM</span>信息，具体由e_oemid定义<br>    <span class="hljs-type">WORD</span>   e_res2[10];                  // 保留字段（10个字）<br>    <span class="hljs-type">LONG</span>   e_lfanew;                    // 新<span class="hljs-type">EXE</span>头部在文件中的地址<br>&#125; <span class="hljs-type">IMAGE_DOS_HEADER</span>, *<span class="hljs-type">PIMAGE_DOS_HEADER</span>;<br></code></pre></td></tr></table></figure><p><strong>e_magic</strong>: DOS文件的魔术数字，通常为<code>0x5A4D</code>（’MZ’）。这是用来标识该文件为一个DOS可执行文件。</p><p><strong>e_cblp</strong>: 文件最后一页的字节数。</p><p><strong>e_cp</strong>: 文件中总共有多少个页面。</p><p><strong>e_crlc</strong>: 重定位项的数量。</p><p><strong>e_cparhdr</strong>: 文件头的大小，以段为单位。</p><p><strong>e_minalloc</strong>: 该程序需要的最小附加段数。</p><p><strong>e_maxalloc</strong>: 该程序允许的最大附加段数。</p><p><strong>e_ss</strong>: 初始堆栈段寄存器（SS）的值。</p><p><strong>e_sp</strong>: 初始堆栈指针寄存器（SP）的值。</p><p><strong>e_csum</strong>: 用于校验文件的校验和。</p><p><strong>e_ip</strong>: 初始指令指针寄存器（IP）的值。</p><p><strong>e_cs</strong>: 初始代码段寄存器（CS）的值。</p><p><strong>e_lfarlc</strong>: 文件中重定位表的位置。</p><p><strong>e_ovno</strong>: 文件的覆盖号，指示是否支持覆盖。</p><p><strong>e_res</strong>: 一组保留字段，通常用于未来扩展。</p><p><strong>e_oemid</strong> 和 <strong>e_oeminfo</strong>: 用于OEM特定的信息，通常在某些特定的设备或应用中使用。</p><p><strong>e_res2</strong>: 另一组保留字段。</p><p><strong>e_lfanew</strong>: 新的EXE头部的文件地址，指向PE头部的起始位置，通常是文件的后面部分，标志着从DOS格式过渡到PE格式。</p><p>但是平时我们分析的都是<strong>32位</strong>和<strong>64位</strong>程序  仅仅使用了其中<strong>两个</strong>成员部分：</p><p><strong>e_magic</strong> 和<strong>e_lfanew</strong>，它们是标识和Windows寻找PE头的位置的</p><p>其他的成员可以使用0x00填充，程序不受影响可以正常运行，但是它们两个不可以</p><p>使用010打开Hello_re查看</p><p><img src="https://raw.githubusercontent.com/QYQS1/picture/main/test/202412062037918.png" alt="QQ_1733488640252"></p><p>前两字节就是e_magic(0x5A4D–MZ)</p><blockquote><p>这两个字母就是Mark Zbikowski的姓名缩写，他是最初的MS-DOS设计者之一。如果把PE文件的这两个字节修改成其他数据，运行该PE文件就会无法正常运行，跳出黑窗口打印Program too big to fit in memory然后闪退</p></blockquote><p>010很贴心的标记了各个部分  第一段红色部分就是DOS MZ文件头(0x40h)64字节</p><p>由于这不是16位程序  我们可以跳过中间部分</p><p>最后的e_lfanew是DWORD类型  4个字节  也就是图中标红部分的最后四个字节  代表着PE头所在的偏移量</p><p>显然是80 00 00 00也就是指向了00000080  如图:</p><p><img src="https://raw.githubusercontent.com/QYQS1/picture/main/test/202412062045353.png" alt="QQ_1733489106422"></p><p>注意到在DOS MZ文件头和PE头中间还有一部分数据(橘黄色部分)</p><p>也就是我们所谓的DOS块</p><p>而DOS块不是结构体，而是由单个字节组成的数据，可以填写任何内容。<br>而注意到其中的值是可以翻译为可读字符串的(右方)</p><p>“This program cannot be run in DOS mode.”</p><p>这涉及到Dos头的另一个作用</p><blockquote><p>DOS头是用来兼容MS-DOS操作系统的，目的是当这个文件在MS-DOS上运行时提示一段文字，大部分情况下是：This program cannot be run in DOS mode.还有一个目的，就是指明NT头在文件中的位置。(PE头有时又叫NT头)</p></blockquote><p>这部分数据在实际操作中常常可以忽略</p><h2 id="1-2-IMAGE-NT-HEADERS–PE头-NT头"><a href="#1-2-IMAGE-NT-HEADERS–PE头-NT头" class="headerlink" title="1.2 IMAGE_NT_HEADERS–PE头(NT头)"></a>1.2 IMAGE_NT_HEADERS–PE头(NT头)</h2><blockquote><p>在MS-DOS头下main，就是PE头，PE头是PE相关结构NT映像头（IMAGE_NT_HEADER）的简称，其中包含许多PE装载器用到的重要字段。</p></blockquote><p>NT头仍然是一个结构体样式</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elm">typedef struct _IMAGE_NT_HEADERS &#123;<br>  <span class="hljs-type">DWORD</span>                   <span class="hljs-type">Signature</span>;<br>  <span class="hljs-type">IMAGE_FILE_HEADER</span>       <span class="hljs-type">FileHeader</span>;<br>  <span class="hljs-type">IMAGE_OPTIONAL_HEADER32</span>/64 <span class="hljs-type">OptionalHeader</span>;<br>&#125; <span class="hljs-type">IMAGE_NT_HEADERS32</span>, *<span class="hljs-type">PIMAGE_NT_HEADERS32</span>;<br></code></pre></td></tr></table></figure><p>跟随偏移我们找到了NT头的起始位置  </p><p><img src="https://raw.githubusercontent.com/QYQS1/picture/main/test/202412062056359.png" alt="QQ_1733489789855"></p><p>很容易注意到开头四个字节(DWORD)是有意义的字符PE</p><p>也就是所谓的PE标识部分(Signature)</p><p>全部应该为”PE\0\0”  标志着PE文件头的开始  而DOS头最后的e_lfanew数据实际指向的也是这个位置</p><p>接下来两个成员为文件头(IMAGE_FILE_HEADER)和可选文件头(IMAGE_OPTIONAL_HEADER32)</p><p>注意到是没有大小定义的  实际上它们也是结构体</p><h3 id="1-2-1-IMAGE-FILE-HEADER"><a href="#1-2-1-IMAGE-FILE-HEADER" class="headerlink" title="1.2.1 IMAGE_FILE_HEADER"></a>1.2.1 IMAGE_FILE_HEADER</h3><p>同样也有结构体定义</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs elm">typedef struct _IMAGE_FILE_HEADER &#123;<br><br><span class="hljs-type">WORD</span> <span class="hljs-type">Machine</span>;//运行平台<br><br><span class="hljs-type">WORD</span> <span class="hljs-type">NumberOfSections</span>;//文件的区块数目<br><br><span class="hljs-type">DWORD</span> <span class="hljs-type">TimeDateStamp</span>;//文件创建的用时间戳标识的日期<br><br><span class="hljs-type">DWORD</span> <span class="hljs-type">PointerToSymbolTable</span>;//指向符号表（用于调试）<br><br><span class="hljs-type">DWORD</span> <span class="hljs-type">NumberOfSymbols</span>;//符号表中符号的个数<br><br><span class="hljs-type">WORD</span> <span class="hljs-type">SizeOfOptionalHeader</span>;//<span class="hljs-type">IMAGE_OPTIONAL_HEADER32</span>结构大小<br><br><span class="hljs-type">WORD</span> <span class="hljs-type">Characteristics</span>;//文件属性<br><br>&#125; <span class="hljs-type">IMAGE_FILE_HEADER</span>, *<span class="hljs-type">PIMAGE_FILE_HEADER</span>;<br></code></pre></td></tr></table></figure><p>注意到WORD二字节  DWORD四字节  所以我们可以给程序分段</p><p><img src="https://raw.githubusercontent.com/QYQS1/picture/main/test/202412062105755.png" alt="QQ_1733490297760"></p><p>第一个框说明了运行的平台标识</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs gauss">机器 标识<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_MACHINE_UNKNOWN           0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_MACHINE_I386              0x014c  <span class="hljs-comment">// Intel 386.</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_MACHINE_R3000             0x0162  <span class="hljs-comment">// MIPS little-endian, 0x160 big-endian</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_MACHINE_R4000             0x0166  <span class="hljs-comment">// MIPS little-endian</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_MACHINE_R10000            0x0168  <span class="hljs-comment">// MIPS little-endian</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_MACHINE_WCEMIPSV2         0x0169  <span class="hljs-comment">// MIPS little-endian WCE v2</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_MACHINE_ALPHA             0x0184  <span class="hljs-comment">// Alpha_AXP</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_MACHINE_SH3               0x01a2  <span class="hljs-comment">// SH3 little-endian</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_MACHINE_SH3DSP            0x01a3</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_MACHINE_SH3E              0x01a4  <span class="hljs-comment">// SH3E little-endian</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_MACHINE_SH4               0x01a6  <span class="hljs-comment">// SH4 little-endian</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_MACHINE_SH5               0x01a8  <span class="hljs-comment">// SH5</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_MACHINE_ARM               0x01c0  <span class="hljs-comment">// ARM Little-Endian</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_MACHINE_THUMB             0x01c2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_MACHINE_AM33              0x01d3</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_MACHINE_POWERPC           0x01F0  <span class="hljs-comment">// IBM PowerPC Little-Endian</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_MACHINE_POWERPCFP         0x01f1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_MACHINE_IA64              0x0200  <span class="hljs-comment">// Intel 64</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_MACHINE_MIPS16            0x0266  <span class="hljs-comment">// MIPS</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_MACHINE_ALPHA64           0x0284  <span class="hljs-comment">// ALPHA64</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_MACHINE_MIPSFPU           0x0366  <span class="hljs-comment">// MIPS</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_MACHINE_MIPSFPU16         0x0466  <span class="hljs-comment">// MIPS</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_MACHINE_AXP64             IMAGE_FILE_MACHINE_ALPHA64</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_MACHINE_TRICORE           0x0520  <span class="hljs-comment">// Infineon</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_MACHINE_CEF               0x0CEF</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_MACHINE_EBC               0x0EBC  <span class="hljs-comment">// EFI Byte Code</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_MACHINE_AMD64             0x8664  <span class="hljs-comment">// AMD64 (K8)</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_MACHINE_M32R              0x9041  <span class="hljs-comment">// M32R little-endian</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_MACHINE_CEE               0xC0EE</span><br></code></pre></td></tr></table></figure><p>说明该程序是AMD64的</p><p>第三个字段是时间戳</p><p>用于表示该PE文件创建的时间，时间是从国际协调时间也就是<code>1970年1月1日00:00</code>起开始计数的，计数单位是秒</p><p>第四到第五个字段略  见注释即可</p><p>第六个字段SizeOfOptionalHeader(倒数第二个二字节框)</p><p>标识了IMAGE_OPTIONAL_HEADER结构的大小  也能看出是64位还是32位的文件</p><p>32位文件值通常是00EOh，对于64位值通常为00F0h</p><p>可见该程序是64位的</p><p>最后一个字段是文件属性</p><p><strong>不一定是以下某个值  也可以是某几个异或得到</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_RELOCS_STRIPPED           0x0001  <span class="hljs-comment">// 文件中的重定位信息已被去除。</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_EXECUTABLE_IMAGE          0x0002  <span class="hljs-comment">// 文件是可执行的（即没有未解决的外部引用）。</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_LINE_NUMS_STRIPPED        0x0004  <span class="hljs-comment">// 文件中的行号信息已被去除。</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_LOCAL_SYMS_STRIPPED       0x0008  <span class="hljs-comment">// 文件中的局部符号已被去除。</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_AGGRESIVE_WS_TRIM         0x0010  <span class="hljs-comment">// 积极修剪工作集（优化内存使用）。</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_LARGE_ADDRESS_AWARE       0x0020  <span class="hljs-comment">// 应用程序可以处理超过2GB的地址。</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_BYTES_REVERSED_LO         0x0080  <span class="hljs-comment">// 机器字节顺序被反转（低位字节在前）。</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_32BIT_MACHINE             0x0100  <span class="hljs-comment">// 32位机器。</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_DEBUG_STRIPPED            0x0200  <span class="hljs-comment">// 调试信息已从文件中去除（通常存放在.DBG文件中）。</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP   0x0400  <span class="hljs-comment">// 如果文件在可移动媒体上，复制并从交换文件中运行。</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_NET_RUN_FROM_SWAP         0x0800  <span class="hljs-comment">// 如果文件在网络上，复制并从交换文件中运行。</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_SYSTEM                    0x1000  <span class="hljs-comment">// 系统文件。</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_DLL                       0x2000  <span class="hljs-comment">// 文件是一个DLL（动态链接库）。</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_UP_SYSTEM_ONLY            0x4000  <span class="hljs-comment">// 文件仅能在单处理器（UP）机器上运行。</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_FILE_BYTES_REVERSED_HI         0x8000  <span class="hljs-comment">// 机器字节顺序被反转（高位字节在前）。</span></span><br><br><br></code></pre></td></tr></table></figure><p>实际上 010仍然很贴心的给出了结构体定义  鼠标放在某段数据上即可  例如在本程序中</p><p><img src="https://raw.githubusercontent.com/QYQS1/picture/main/test/202412062135773.png" alt="QQ_1733492097612"></p><h3 id="1-2-2-IMAGE-OPTIONAL-HEADER"><a href="#1-2-2-IMAGE-OPTIONAL-HEADER" class="headerlink" title="1.2.2 IMAGE_OPTIONAL_HEADER"></a>1.2.2 IMAGE_OPTIONAL_HEADER</h3><p>注:在不同的平台下是不一样的，例如32位下是IMAGE_OPTIONAL_HEADER32，而在64位下是IMAGE_OPTIONAL_HEADER64。</p><p>这个结构是IMAGE_FILE_HEADER结构的补充。这两个结构合起来才能对整个PE文件头进行描述。</p><p>结构体如下(左边是相对于文件头的偏移量  也就是刚刚图片红框后面的部分开始)</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">typedef struct _IMAGE_OPTIONAL_HEADER <br>&#123;<br>  //<br>  // Standard fields. <br>  //<br>+<span class="hljs-number">18h</span>  <span class="hljs-built_in">WORD</span>  Magic<span class="hljs-comment">;     // 标志字</span><br>+<span class="hljs-number">1Ah</span>  <span class="hljs-built_in">BYTE</span>   MajorLinkerVersion<span class="hljs-comment">;   // 链接程序的主版本号</span><br>+<span class="hljs-number">1Bh</span>  <span class="hljs-built_in">BYTE</span>   MinorLinkerVersion<span class="hljs-comment">;   // 链接程序的次版本号</span><br>+<span class="hljs-number">1Ch</span>  <span class="hljs-built_in">DWORD</span>  SizeOfCode<span class="hljs-comment">;   // 所有含代码的节的总大小</span><br>+<span class="hljs-number">20h</span>  <span class="hljs-built_in">DWORD</span>  SizeOfInitializedData<span class="hljs-comment">;  // 所有含已初始化数据的节的总大小</span><br>+<span class="hljs-number">24h</span>  <span class="hljs-built_in">DWORD</span>  SizeOfUninitializedData<span class="hljs-comment">; // 所有含未初始化数据的节的大小</span><br>+<span class="hljs-number">28h</span>  <span class="hljs-built_in">DWORD</span>  AddressOfEntryPoint<span class="hljs-comment">;  // 程序执行入口RVA</span><br>+<span class="hljs-number">2Ch</span>  <span class="hljs-built_in">DWORD</span>  BaseOfCode<span class="hljs-comment">;   // 代码的区块的起始RVA</span><br>+<span class="hljs-number">30h</span>  <span class="hljs-built_in">DWORD</span>  BaseOfData<span class="hljs-comment">;   // 数据的区块的起始RVA</span><br>  //<br>  // NT additional fields.  以下是属于NT结构增加的领域。<br>  //<br>+<span class="hljs-number">34h</span>  <span class="hljs-built_in">DWORD</span>  ImageBase<span class="hljs-comment">;   // *********程序的首选装载地址</span><br>+<span class="hljs-number">38h</span>  <span class="hljs-built_in">DWORD</span>  SectionAlignment<span class="hljs-comment">;   // *********内存中的区块的对齐大小</span><br>+<span class="hljs-number">3Ch</span>  <span class="hljs-built_in">DWORD</span>  FileAlignment<span class="hljs-comment">;   // *********文件中的区块的对齐大小</span><br>+<span class="hljs-number">40h</span>  <span class="hljs-built_in">WORD</span>  MajorOperatingSystemVersion<span class="hljs-comment">; // 要求操作系统最低版本号的主版本号</span><br>+<span class="hljs-number">42h</span>  <span class="hljs-built_in">WORD</span>  MinorOperatingSystemVersion<span class="hljs-comment">; // 要求操作系统最低版本号的副版本号</span><br>+<span class="hljs-number">44h</span>  <span class="hljs-built_in">WORD</span>  MajorImageVersion<span class="hljs-comment">;    // 可运行于操作系统的主版本号</span><br>+<span class="hljs-number">46h</span>  <span class="hljs-built_in">WORD</span>  MinorImageVersion<span class="hljs-comment">;    // 可运行于操作系统的次版本号</span><br>+<span class="hljs-number">48h</span>  <span class="hljs-built_in">WORD</span>  MajorSubsystemVersion<span class="hljs-comment">; // 要求最低子系统版本的主版本号</span><br>+<span class="hljs-number">4Ah</span>  <span class="hljs-built_in">WORD</span>  MinorSubsystemVersion<span class="hljs-comment">; // 要求最低子系统版本的次版本号</span><br>+<span class="hljs-number">4Ch</span>  <span class="hljs-built_in">DWORD</span>  Win32VersionValue<span class="hljs-comment">;    // 莫须有字段，不被病毒利用的话一般为0</span><br>+<span class="hljs-number">50h</span>  <span class="hljs-built_in">DWORD</span>  SizeOfImage<span class="hljs-comment">;    // 映像装入内存后的总尺寸</span><br>+<span class="hljs-number">54h</span>  <span class="hljs-built_in">DWORD</span>  SizeOfHeaders<span class="hljs-comment">;    // 所有头 + 区块表的尺寸大小</span><br>+<span class="hljs-number">58h</span>  <span class="hljs-built_in">DWORD</span>  CheckSum<span class="hljs-comment">;    // 映像的校检和</span><br>+<span class="hljs-number">5Ch</span>  <span class="hljs-built_in">WORD</span>  Subsystem<span class="hljs-comment">;    // 可执行文件期望的子系统</span><br>+<span class="hljs-number">5Eh</span>  <span class="hljs-built_in">WORD</span>  DllCharacteristics<span class="hljs-comment">;    // DllMain()函数何时被调用，默认为 0</span><br>+<span class="hljs-number">60h</span>  <span class="hljs-built_in">DWORD</span>  SizeOfStackReserve<span class="hljs-comment">;    // 初始化时的栈大小</span><br>+<span class="hljs-number">64h</span>  <span class="hljs-built_in">DWORD</span>  SizeOfStackCommit<span class="hljs-comment">;    // 初始化时实际提交的栈大小</span><br>+<span class="hljs-number">68h</span>  <span class="hljs-built_in">DWORD</span>  SizeOfHeapReserve<span class="hljs-comment">;    // 初始化时保留的堆大小</span><br>+<span class="hljs-number">6Ch</span>  <span class="hljs-built_in">DWORD</span>  SizeOfHeapCommit<span class="hljs-comment">;    // 初始化时实际提交的堆大小</span><br>+<span class="hljs-number">70h</span>  <span class="hljs-built_in">DWORD</span>  LoaderFlags<span class="hljs-comment">;    // 与调试有关，默认为 0 </span><br>+<span class="hljs-number">74h</span>  <span class="hljs-built_in">DWORD</span>  NumberOfRvaAndSizes<span class="hljs-comment">; // 下边数据目录的项数，这个字段自Windows NT 发布以来    // 一直是16</span><br>+<span class="hljs-number">78h</span>  <span class="hljs-built_in">DWORD</span>  DataDirctory[<span class="hljs-number">16</span>]<span class="hljs-comment">;     // ********* 数据目录表</span><br>&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32<span class="hljs-comment">;</span><br><br><br></code></pre></td></tr></table></figure><p>第一个字段</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">\<span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_NT_OPTIONAL_HDR32_MAGIC    0x10b  <span class="hljs-comment">// 32位PE可选头</span></span><br>\<span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_NT_OPTIONAL_HDR64_MAGIC    0x20b  <span class="hljs-comment">// 64位PE可选头</span></span><br>\<span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_ROM_OPTIONAL_HDR_MAGIC    0x107  </span><br></code></pre></td></tr></table></figure><p>注意</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lasso">字段<span class="hljs-number">6</span>：AddressOfEntryPoint 表 程序入口RVA，即OEP:<br>   <span class="hljs-string">``</span>EOP:程序入口点，壳相关概念<br>   <span class="hljs-string">``</span>OEP:原本的程序入口点（实际为偏移，+模块基址=实际入口点）<br>   <span class="hljs-string">``</span>EP: 被加工后的入口点<br>字段<span class="hljs-number">9</span>：ImageBase 表 模块加载基地址，exe默认<span class="hljs-number">0x400000</span>，dll默认<span class="hljs-number">0x10000000</span><br>   <span class="hljs-string">``</span>建议装载地址：exe映射加载到内存中的首地址= PE <span class="hljs-number">0</span>处，即实例句柄hInstance<br>   <span class="hljs-string">``</span>一般而言，exe文件可遵从装载地址建议，但dll文件无法满足<br>尾字段：DataDirectory 表 数据目录表，用来定义多种不通用处的数据块。<br>   <span class="hljs-string">``</span>存储了PE中各个表的位置，详情参考IMAGE_DIRECTORY_ENTRY<span class="hljs-params">...</span>系列宏<br></code></pre></td></tr></table></figure><p>​AddressOfEntryPoint</p><p>​是入口地址  如果想在一个可执行文件中附加了一段代码并且要让这段代码首先被执行，就可以通过更改入口地址到目标代码上，然后再跳转回原有的入口地址</p><p>​ImageBase<br>　　该成员指定了文件被执行时优先被装入的地址，如果这个地址已经被占用，那么程序装载器就会将它载入其他地址。当文件被载入其他地址后，就必须通过重定位表进行资源的重定位，这就会变慢文件的载入速度。而装载到ImageBase指定的地址就不会进行资源重定位。<br>　　对于EXE文件来说，由于每个文件总是使用独立的虚拟地址空间，优先装入地址不可能被其他模块占据，所以EXE总是能够按照这个地址装入，这也意味着EXE文件不再需要重定位信息。对于DLL文件来说，由于多个DLL文件全部使用宿主EXE文件的地址空间，不能保证优先装入地址没有被其他的DLL使用，所以DLL文件中必须包含重定位信息以防万一。因此，在前面介绍的 IMAGE_FILE_HEADER 结构的 Characteristics 成员中，DLL 文件对应的IMAGE_FILE_RELOCS_STRIPPED位总是为0，而EXE文件的这个标志位总是为1。 </p><p>​SectionAlignment<br>　　该成员指定了文件被装入内存时，节区的对齐单位。节区被装入内存的虚拟地址必须是该成员的整数倍，以字节为单位，并且该成员的值必须大于等于FileAlignment的值。该成员的默认大小为系统的页面大小。</p><p>　　FileAlignment<br>　　该成员指定了文件在硬盘上时，节区的对齐单位。节区在硬盘上的地址必须是该成员的整数倍，以字节为单位，并且该成员的值必须大于等于FileAlignment的值。该值应为200h到10000h(含)之间的2的幂。默认为200h。如果SectionAlignment的值小于系统页面大小，则FileAlignment的值必须等于SectionAlignment的值。</p><p>　　SizeOfImage<br>　　该成员指定了文件载入内存后的总体大小，包含所有的头部信息。并且它的值必须是SectionAlignment的整数倍。整个PE文件在内存中展开后的大小</p><p>　　SizeOfHeaders<br>　　该成员指定了PE文件头的大小，并且向上舍入为FileAlignment的倍数，值的计算方式为：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp">SizeOfHeaders = (e_lfanew<span class="hljs-comment">/*DOS头部*/</span> +　<span class="hljs-number">4</span><span class="hljs-comment">/*PE签名*/</span> +<br>                <span class="hljs-keyword">sizeof</span>(IMAGE_FILE_HEADER) +<br>                SizeOfOptionalHeader + <span class="hljs-comment">/*NT头*/</span><br>                <span class="hljs-keyword">sizeof</span>(IMAGE_SECTION_HEADER) * NumberOfSections) / <span class="hljs-comment">/*节表*/</span><br>                FileAlignment  *<br>                FileAlignment +<br>                FileAlignment;    <span class="hljs-comment">/*向上舍入 一般该结果不可能是FileAlignment的整数倍，所以直接加上FileAlignment还是没问题的 */</span><br></code></pre></td></tr></table></figure><h4 id="1-2-2-1-DataDirectory表"><a href="#1-2-2-1-DataDirectory表" class="headerlink" title="1.2.2.1 DataDirectory表"></a>1.2.2.1 DataDirectory表</h4><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elm">typedef struct _IMAGE_DATA_DIRECTORY &#123;<br>    <span class="hljs-type">DWORD</span>   <span class="hljs-type">VirtualAddress</span>;<br>    <span class="hljs-type">DWORD</span>   <span class="hljs-type">Size</span>;<br>&#125; <span class="hljs-type">IMAGE_DATA_DIRECTORY</span>, *<span class="hljs-type">PIMAGE_DATA_DIRECTORY</span>;<br></code></pre></td></tr></table></figure><p>对于这个结构体数组  每一个成员都包含一个地址和一个大小  定义了一个区域 事实上 数组中的每一项对应一个特定的数据结构，包括导入表，导出表等等，根据不同的索引取出来的是不同的结构，头文件里定义各个项表示哪个结构</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_DIRECTORY_ENTRY_EXPORT          0   <span class="hljs-comment">// 导出目录</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_DIRECTORY_ENTRY_IMPORT          1   <span class="hljs-comment">// 导入目录</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_DIRECTORY_ENTRY_RESOURCE        2   <span class="hljs-comment">// 资源目录</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_DIRECTORY_ENTRY_EXCEPTION       3   <span class="hljs-comment">// 异常目录</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_DIRECTORY_ENTRY_SECURITY        4   <span class="hljs-comment">// 安全目录</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_DIRECTORY_ENTRY_BASERELOC       5   <span class="hljs-comment">// 基址重定位表</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_DIRECTORY_ENTRY_DEBUG           6   <span class="hljs-comment">// 调试目录</span></span><br><span class="hljs-comment">//      IMAGE_DIRECTORY_ENTRY_COPYRIGHT       7   // （X86使用）</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_DIRECTORY_ENTRY_ARCHITECTURE    7   <span class="hljs-comment">// 架构特定数据</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_DIRECTORY_ENTRY_GLOBALPTR       8   <span class="hljs-comment">// 全局指针的RVA（相对虚拟地址）</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_DIRECTORY_ENTRY_TLS             9   <span class="hljs-comment">// TLS（线程本地存储）目录</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG    10   <span class="hljs-comment">// 加载配置目录</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT   11   <span class="hljs-comment">// 头文件中的绑定导入目录</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_DIRECTORY_ENTRY_IAT            12   <span class="hljs-comment">// 导入地址表</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT   13   <span class="hljs-comment">// 延迟加载导入描述符</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR 14   <span class="hljs-comment">// COM运行时描述符</span></span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/QYQS1/picture/main/test/202412062139591.png" alt="QQ_1733492361878"></p><p>注意到这里是NumberOfRvaAndSizes字段  那么之后的就是这个结构体数组  16*8共128个字节</p><h5 id="1-2-2-1-1-IMAGE-EXPORT-DIRECTORY——导出表"><a href="#1-2-2-1-1-IMAGE-EXPORT-DIRECTORY——导出表" class="headerlink" title="1.2.2.1.1 IMAGE_EXPORT_DIRECTORY——导出表"></a>1.2.2.1.1 IMAGE_EXPORT_DIRECTORY——导出表</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs elm">typedef struct _IMAGE_EXPORT_DIRECTORY &#123;<br>    <span class="hljs-type">DWORD</span>   <span class="hljs-type">Characteristics</span>;        //         未使用，总为0<br>    <span class="hljs-type">DWORD</span>   <span class="hljs-type">TimeDateStamp</span>;          //         文件创建时间戳<br>    <span class="hljs-type">WORD</span>    <span class="hljs-type">MajorVersion</span>;           //         未使用，总为0<br>    <span class="hljs-type">WORD</span>    <span class="hljs-type">MinorVersion</span>;           //         未使用，总为0<br>    <span class="hljs-type">DWORD</span>   <span class="hljs-type">Name</span>;                   // **重要   指向一个代表此 <span class="hljs-type">DLL</span>名字的 <span class="hljs-type">ASCII</span>字符串的 <span class="hljs-type">RVA</span><br>    <span class="hljs-type">DWORD</span>   <span class="hljs-type">Base</span>;                   // **重要   函数的起始序号<br>    <span class="hljs-type">DWORD</span>   <span class="hljs-type">NumberOfFunctions</span>;      // **重要   导出函数地址表的个数<br>    <span class="hljs-type">DWORD</span>   <span class="hljs-type">NumberOfNames</span>;          // **重要   以函数名字导出的函数个数<br>    <span class="hljs-type">DWORD</span>   <span class="hljs-type">AddressOfFunctions</span>;     // **重要   导出函数地址表<span class="hljs-type">RVA</span><br>    <span class="hljs-type">DWORD</span>   <span class="hljs-type">AddressOfNames</span>;         // **重要   导出函数名称表<span class="hljs-type">RVA</span><br>    <span class="hljs-type">DWORD</span>   <span class="hljs-type">AddressOfNameOrdinals</span>;  // **重要   导出函数序号表<span class="hljs-type">RVA</span><br>&#125; <span class="hljs-type">IMAGE_EXPORT_DIRECTORY</span>, *<span class="hljs-type">PIMAGE_EXPORT_DIRECTORY</span>;<br></code></pre></td></tr></table></figure><blockquote><p>导出表简介：在导出表中前四个成员基本没有用，我们就不用去管他，但是剩下的成员都是非常重要的。现在我们来说说导出表的作用，简单来说导出表就是用来描述模块中的导出函数的结构，导出函数就是将功能的提供给外部使用的函数，如果一个PE文件导出了函数，那么这个函数的信息就会记录PE文件的导出表中，方便外部程序加载该文件进行动态调用。可能有时函数在导出表中只有一个序号而没有名字，也就造成了导出表中有了三个子表的存在，分别是：函数地址表、函数名称表和函数序号表。使得外部程序可以通过函数名称和函数序号两种方式获取该函数的地址。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//系统中获取函数地址的两种方法：</span><br><span class="hljs-type">HMODULE</span> <span class="hljs-variable">hModule</span> <span class="hljs-operator">=</span> LoadLibraryA(<span class="hljs-string">&quot;User32.dll&quot;</span>);<br><span class="hljs-comment">//1、函数名获取</span><br><span class="hljs-type">DWORD</span> <span class="hljs-variable">FuncAddress</span> <span class="hljs-operator">=</span> GetProcAddress(hModule, <span class="hljs-string">&quot;MessageBoxA&quot;</span>);<br><span class="hljs-comment">//2、序号获取</span><br><span class="hljs-type">DWORD</span> <span class="hljs-variable">FuncAddress</span> <span class="hljs-operator">=</span> GetProcAddress(hModule, <span class="hljs-number">12</span>);<br></code></pre></td></tr></table></figure><p>​AddressOfFunctions<br>　　这个值是一个4字节的RVA地址，他可以用来定位导出表中所有函数的地址表，这个地址表可以当作一个成员宽度为4的数组进行处理，它的长度由NumberOfFunctions进行限定，地址表中的成员也是一个RVA地址，在内存中加上ImageBase后才是函数真正的地址。<br>　　AddressOfNames<br>　　这个值是一个4字节的RVA地址，他可以用来定位导出表中所有函数的名称表，这个名称表也可以当作一个成员宽度为4的数组进行处理，它的长度由NumberOfNames进行限定，名称表的成员也是一个RVA地址，在FIleBuffer状态下需要进行RVA到FOA的转换才能真正找到函数名称。<br>　　AddressOfNameOrdinals<br>　　这个值是一个4字节的RVA地址，他可以用来定位导出表中所有函数的序号表，这个序号表可以当作一个成员宽度为2的数组进行处理，它的长度由NumberOfNames进行限定，名称表的成员是一个函数序号，该序号用于通过名称获取函数地址。<br>　　NumberOfFunctions<br>　　注意，这个值并不是真的函数数量，他是通过函数序号表中最大的序号减去最小的序号再加上一得到的，例如：一共导出了3个函数，序号分别是：0、2、4，NumberOfFunctions &#x3D; 4 - 0 + 1 &#x3D; 5个。</p><h5 id="1-2-2-1-2-IMAGE-IMPORT-DESCRIPTOR——导入表"><a href="#1-2-2-1-2-IMAGE-IMPORT-DESCRIPTOR——导入表" class="headerlink" title="1.2.2.1.2 IMAGE_IMPORT_DESCRIPTOR——导入表"></a>1.2.2.1.2 IMAGE_IMPORT_DESCRIPTOR——导入表</h5><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs abnf">typedef struct _IMAGE_IMPORT_DESCRIPTOR &#123;<br>    union &#123;<br>        DWORD   Characteristics<span class="hljs-comment">;</span><br>        DWORD   OriginalFirstThunk<span class="hljs-comment">;             //导入名称表(INT)的RVA地址</span><br>    &#125; DUMMYUNIONNAME<span class="hljs-comment">;</span><br>    DWORD   TimeDateStamp<span class="hljs-comment">;                      //时间戳多数情况可忽略  如果是0xFFFFFFFF表示IAT表被绑定为函数地址</span><br>    DWORD   ForwarderChain<span class="hljs-comment">;</span><br>    DWORD   Name<span class="hljs-comment">;                               //导入DLL文件名的RVA地址</span><br>    DWORD   FirstThunk<span class="hljs-comment">;                         //导入地址表(IAT)的RVA地址</span><br>&#125; IMAGE_IMPORT_DESCRIPTOR<span class="hljs-comment">;</span><br>typedef IMAGE_IMPORT_DESCRIPTOR UNALIGNED *PIMAGE_IMPORT_DESCRIPTOR<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><blockquote><p>导入表简介：PE文件使用来自于其他DLL的代码或数据是，称作导入(或者输入)。当PE文件装入时，Windows装载器的工作之一就是定位所有被输入的函数和数据，并且让正在被装入的程序可以使用这些地址。这个过程就是通过PE文件的导入表来完成的，导入表中保存的是函数名和其驻留的DLL名等动态链接所需的信息。</p></blockquote><p>　　OriginalFirstThunk<br>　　这个值是一个4字节的RVA地址，这个地址指向了导入名称表(INT)，INT是一个IMAGE_THUNK_DATA结构体数组，这个结构体的最后一个成员内容为0时数组结束。这个数组的每一个成员又指向了一个IMAGE_IMPORT_BY_NAME结构体，这个结构体包含了两个成员函数序号和函数名，不过这个序号一般没什么用，所以有的编译器会把函数序号置0。函数名可以当作一个以0结尾的字符串。(注：这个表不在目录项中。)<br>　　Name<br>　　DLL名字的指针，是一个RVA地址，指向了一个以0结尾的ASCII字符串。<br>　　FirstThunk<br>　　这个值是一个4字节的RVA地址，这个地址指向了导入地址表(IAT)，这个IAT和INT一样，也是一个IMAGE_THUNK_DATA结构体数组，不过它在程序载入前和载入后由两种状态，在程序载入前它的结构和内容和INT表完全一样，但却是两个不同的表，指向了IMAGE_IMPORT_BY_NAME结构体。在程序载入后，他的结构和INT表一样，但内容就不一样了，里面存放的都是导入函数的地址。(注：这个表在目录项中，需要注意。)<br>IMAGE_THUNK_DATA——INT、IAT的结构体:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs abnf">typedef struct _IMAGE_THUNK_DATA32 &#123;<br>    union &#123;<br>        DWORD ForwarderString<span class="hljs-comment">;     </span><br>        DWORD Function<span class="hljs-comment">;            </span><br>        DWORD Ordinal<span class="hljs-comment">;</span><br>        DWORD AddressOfData<span class="hljs-comment">;        // PIMAGE_IMPORT_BY_NAME 的地址RVA</span><br>    &#125; u1<span class="hljs-comment">;</span><br>&#125; IMAGE_THUNK_DATA32<span class="hljs-comment">;</span><br>typedef IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32<span class="hljs-comment">;</span><br><br>//注：这个结构体是联合类型的，每一个成员都是<span class="hljs-number">4</span>字节，所以为了编程方便，完全可以用一个<span class="hljs-number">4</span>字节的数组取代它。<br></code></pre></td></tr></table></figure><p>IMAGE_IMPORT_BY_NAME 结构体:</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sqf">typedef struct <span class="hljs-variable">_IMAGE_IMPORT_BY_NAME</span> &#123;<br>    WORD    <span class="hljs-built_in">Hint</span>;          <span class="hljs-comment">//可能为空，编译器决定，如果不为空是函数在导出表中的索引</span><br>    CHAR   <span class="hljs-built_in">Name</span>[<span class="hljs-number">1</span>];        <span class="hljs-comment">//函数名称，以0结尾</span><br>&#125; IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;<br><br><span class="hljs-comment">//注：这个结构体由两个成员组成，大致一看它的大小是3个字节，其实它的大小是不固定的，</span><br><span class="hljs-comment">//    因为无法判断函数名的长度，所以最后一个成员是一个以0结尾的字符串。</span><br></code></pre></td></tr></table></figure><h5 id="1-2-2-1-3-IMAGE-RESOURCE-DIRECTORY——资源表"><a href="#1-2-2-1-3-IMAGE-RESOURCE-DIRECTORY——资源表" class="headerlink" title="1.2.2.1.3 IMAGE_RESOURCE_DIRECTORY——资源表"></a>1.2.2.1.3 IMAGE_RESOURCE_DIRECTORY——资源表</h5><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-comment">//资源目录头</span><br>typedef <span class="hljs-keyword">struct</span> <span class="hljs-type">_IMAGE_RESOURCE_DIRECTORY</span> &#123;<br>    DWORD   Characteristics;        <span class="hljs-comment">//资源属性        一般为0</span><br>    DWORD   TimeDateStamp;          <span class="hljs-comment">//资源创建时间戳   一般为0</span><br>    WORD    MajorVersion;           <br>    WORD    MinorVersion;<br>    WORD    NumberOfNamedEntries;   <span class="hljs-comment">//以名称命名的目录项数量  重要</span><br>    WORD    NumberOfIdEntries;      <span class="hljs-comment">//以ID命名的目录项数量   重要</span><br><span class="hljs-comment">//  IMAGE_RESOURCE_DIRECTORY_ENTRY DirectoryEntries[];</span><br>&#125; IMAGE_RESOURCE_DIRECTORY, *PIMAGE_RESOURCE_DIRECTORY;<br><br><span class="hljs-comment">//资源目录项</span><br>typedef <span class="hljs-keyword">struct</span> <span class="hljs-type">_IMAGE_RESOURCE_DIRECTORY_ENTRY</span> &#123;<br>    <span class="hljs-built_in">union</span> &#123;<br>        <span class="hljs-keyword">struct</span> &#123;<br>            DWORD NameOffset:<span class="hljs-number">31</span>;         <span class="hljs-comment">//字符串的偏移(不是RVA、FOA，相对特殊)</span><br>            DWORD NameIsString:<span class="hljs-number">1</span>;        <span class="hljs-comment">//判断名字是否是字符串    1:是  0:不是</span><br>        &#125; DUMMYSTRUCTNAME;<br>        DWORD   Name;<br>        WORD    Id;                      <span class="hljs-comment">//目录项的ID(在一级目录指资源类型，二级目录指资源编号，三级目录指代码的页号)</span><br>    &#125; DUMMYUNIONNAME;                   <br>    <span class="hljs-built_in">union</span> &#123;<br>        DWORD   OffsetToData;            <span class="hljs-comment">//如果不是目录，这里指数据的偏移(不是RVA、FOA，相对特殊)</span><br>        <span class="hljs-keyword">struct</span> &#123;<br>            DWORD   OffsetToDirectory:<span class="hljs-number">31</span>;<span class="hljs-comment">//目录的偏移(不是RVA、FOA，相对特殊)</span><br>            DWORD   DataIsDirectory:<span class="hljs-number">1</span>;   <span class="hljs-comment">//判断子资源项是否是目录    1:是  0:不是</span><br>        &#125; DUMMYSTRUCTNAME2;<br>    &#125; DUMMYUNIONNAME2;<br>&#125; IMAGE_RESOURCE_DIRECTORY_ENTRY, *PIMAGE_RESOURCE_DIRECTORY_ENTRY;<br><br><span class="hljs-comment">//数据项</span><br>typedef <span class="hljs-keyword">struct</span> <span class="hljs-type">_IMAGE_RESOURCE_DATA_ENTRY</span> &#123;<br>    DWORD   OffsetToData;        <span class="hljs-comment">//数据的偏移    重要</span><br>    DWORD   Size;                <span class="hljs-comment">//数据的大小    重要</span><br>    DWORD   CodePage;            <span class="hljs-comment">//代码页(一般为0)</span><br>    DWORD   Reserved;            <span class="hljs-comment">//保留</span><br>&#125; IMAGE_RESOURCE_DATA_ENTRY, *PIMAGE_RESOURCE_DATA_ENTRY;<br><br><span class="hljs-comment">//名字字符串结构</span><br>typedef <span class="hljs-keyword">struct</span> <span class="hljs-type">_IMAGE_RESOURCE_DIR_STRING_U</span> &#123;<br>    WORD    Length;                <span class="hljs-comment">//Unicode字符串长度</span><br>    WCHAR   NameString[ <span class="hljs-number">1</span> ];       <span class="hljs-comment">//Unicode字符串</span><br>&#125; IMAGE_RESOURCE_DIR_STRING_U, *PIMAGE_RESOURCE_DIR_STRING_U;<br></code></pre></td></tr></table></figure><blockquote><p>资源表简介：在Windows程序中其各种界面被称作为资源，其中被系统预先定义的资源类型包括：鼠标指针,位图, 图标,菜单,对话框, 字符串列表,字体目录, 字体,加速键,非格式化资源,消息列表,鼠标指针组,图标组,版本信息。当然还有用户自定义的资源类型，这些资源的就不举例了。这些资源都是以二进制的形式保存到PE文件中，而保存资源信息的结构就是资源表，它位于目录项的第三位。在PE文件的所有结构中，资源表的结构最为复杂，这是因为资源表用类似于文件目录结构的方式进行保存的，从根目录开始，下设一级目录、二级目录和三级目录，三级目录下才是资源文件的信息，而且资源表的结构定位也是最为特殊的<br>　　一级目录是按照资源类型分类的，如位图资源、光标资源、图标资源。<br>　　二级目录是按照资源编号分类的，同样是菜单资源，其子目录通过资源ID编号分类，例如：IDM_OPEN的ID号是2001h，IDM_EXIT的ID号是2002h等多个菜单编号。<br>　　三级目录是按照资源的代码页分类的，即不同语言的代码页对应不同的代码页编号，例如：简体中文代码页编号是2052。<br>　　三级目录下是节点，也称为资源数据，这是一个IMAGE_RESOURCE_DATA_ENTRY的数据结构，里面保存了资源的RVA地址、资源的大小，对所有资源数据块的访问都是从这里开始的。</p><p>注：资源表的一级目录、二级目录、三级目录的目录结构是相同的都是由一个资源目录头加上一个资源目录项数组组成的，可以将这个结构称作资源目录结构单元。</p></blockquote><p>IMAGE_RESOURCE_DIRECTORY.NumberOfNamedEntries和IMAGE_RESOURCE_DIRECTORY.NumberOfIdEntries<br>　　在资源目录头结构中这两个字段是最为重要的，其他字段大部分为0。NumberOfNamedEntries表示在该资源目录头后跟随的资源目录项中以IMAGE_RESOURCE_DIR_STRING_U结构命名的资源目录项数量。NumberOfIdEntries表示在该资源目录头后跟随的资源目录项中以ID命名的资源目录项数量。两个字段加起来就是本资源目录头后的资源目录项的数量总和。也就是后面IMAGE_RESOURCE_DIRECTORY_ENTRY结构的总数量。</p><p>　　IMAGE_RESOURCE_DIRECTORY_ENTRY.DUMMYUNIONNAME<br>　　在资源目录项中该字段是一个联合体类型，大小为4个字节，它决定这个资源目录的名字是字符串还是ID号。如果这个字段的最高位是1，则表示该资源的名字是字符串类型，该字段的低31位是IMAGE_RESOURCE_DIR_STRING_U结构的偏移，但这个偏移既不是FOA也不是RVA，它是以首个资源表的地址为基址，加上低31位的值才是字符串结构的地址。如果最高位为0，则表示该资源的名字是一个ID号，整个字段的值就是该资源的ID。(如果是一级目录的资源项，该ID有14个号码被预先定义了)</p><p>一级目录中预定义的资源ID：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scss">资源ID含义 资源ID含义<br><span class="hljs-number">0</span>x01鼠标指针(Cursor) <span class="hljs-number">0</span>x08字体(Font)<br><span class="hljs-number">0</span>x02位图(Bitmap) <span class="hljs-number">0</span>x09加速键(Accelerators)<br><span class="hljs-number">0</span>x03图标(Icon) <span class="hljs-number">0</span>x0A非格式化资源(Unformatted)<br><span class="hljs-number">0</span>x04菜单(Menu) <span class="hljs-number">0</span>x0B消息列表(Message Table)<br><span class="hljs-number">0</span>x05对话框(Dialog) <span class="hljs-number">0</span>x0C鼠标指针组(Group Cursor)<br><span class="hljs-number">0</span>x06字符串列表(String) <span class="hljs-number">0</span>x0E图标组(Group Icon)<br><span class="hljs-number">0</span>x07字体目录(Font Directory) <span class="hljs-number">0</span>x10版本信息(Version Information)<br>　IMAGE_RESOURCE_DIRECTORY_ENTRY<span class="hljs-selector-class">.DUMMYUNIONNAME2</span><br></code></pre></td></tr></table></figure><p>　　在资源目录项中该字段是一个联合体类型，大小为4个字节，它决定这个资源目录的目录中子节点的类型(是目录还是节点)。如果这个字段的最高位是1，则表示该资源的子节点是一个目录类型，该字段的低31位是子目录的资源目录头结构的偏移，但这个偏移既不是FOA也不是RVA，它是以首个资源表的地址为基址，加上低31位的值才是资源目录头结构的地址。如果最高位为0，则表示该资源的子节点是一个节点，它也以首个资源表的地址为基址，整个字段的值就是该资源节点的偏移。这个节点是IMAGE_RESOURCE_DATA_ENTRY类型的结构体。(一般在三级目录中该字段的最高位位0，而在其他两个目录中该字段的最高位为1)</p><p>注：为了编程方便，IMAGE_RESOURCE_DIRECTORY_ENTRY的联合体中出现了一组特殊的struct结构体，其成员声明格式为：[类型] [变量名] : [位宽表达式]， 这个格式就是C语言中位段的声明格式。NameOffset字段的值等于该联合体的低31位，NameIsString字段的值等于该联合体的最高位。将一个4字节的类型拆成这样两个字段就可以方便的避免了繁琐的位操作了，而且该结构的总大小不会发生变化。</p><p>IMAGE_RESOURCE_DATA_ENTRY<br>　　这个结构体就是目录资源的三级目录下的子目录，里面存储的就是资源文件的信息，如OffsetToData字段存储的就是资源文件的RVA地址，它指向了资源的二进制信息，Size字段存储的就是资源文件的大小，CodePage字段存储资源的代码页但大多数情况为0。<br>　　注：在其指向的资源数据中，字符串都是Unicode的编码方式，每个字符都是由一个16位(一个单字)的值表示，并且都是以UNICODE_NULL结束(其实就是两个0x00)。<br>　　IMAGE_RESOURCE_DIR_STRING_U<br>　　该结构体就是目录资源的名称结构，里面存在两个字段，都是2个字节，Length字段存储的是目录资源名称的长度，以2个字节为单位。NameString字段是一个Unicode字符串的第一个字符，并不以0结尾，其长度是由Length字段限制。该结构的总大小并不是表面上的4个字节，而是根据名字长度变化的，计算方式为：Size &#x3D; SizeOf(WCHAR) * (Length + 1); 这里的1是Length字段的大小。</p><h5 id="1-2-2-1-4-IMAGE-BASE-RELOCATION——重定位表"><a href="#1-2-2-1-4-IMAGE-BASE-RELOCATION——重定位表" class="headerlink" title="1.2.2.1.4 IMAGE_BASE_RELOCATION——重定位表"></a>1.2.2.1.4 IMAGE_BASE_RELOCATION——重定位表</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elm">typedef struct _IMAGE_BASE_RELOCATION &#123;<br>    <span class="hljs-type">DWORD</span>   <span class="hljs-type">VirtualAddress</span>;            重定位数据所在页的<span class="hljs-type">RVA</span><br>    <span class="hljs-type">DWORD</span>   <span class="hljs-type">SizeOfBlock</span>;               当前页中重定位数据块的大小<br>&#125; <span class="hljs-type">IMAGE_BASE_RELOCATION</span>;<br>typedef <span class="hljs-type">IMAGE_BASE_RELOCATION</span> <span class="hljs-type">UNALIGNED</span> * <span class="hljs-type">PIMAGE_BASE_RELOCATION</span>;<br></code></pre></td></tr></table></figure><blockquote><p>重定位表简介：正如我们所知，在程序运行时系统首先会给程序分配一个4GB的虚拟内存空间，低2G空间用于放置EXE文件和DLL文件，高2G空间则是用于取得程序使用(这个空间所有程序共享)。系统随后就会将EXE文件第一个贴入低2G空间占据文件指定的ImageBase，所以EXE文件有时会没有重定位表，因为ImageBase区域大多数情况是可以使用的，也就不需要重定位。贴完EXE文件后接下来就会将大量程序使用的DLL文件贴入虚拟空间，然而这些DLL文件的ImageBase可能会发生冲突，所以有些DLL文件就不会被贴入指定的地址，但是为了让程序正常运行就只能将这些DLL贴入其他的地址。但是在PE文件中很多地址都是被编译器写死固定的(例子在下方代码块)，如果基址改变这些地址就会无法使用，为了避免这样的事情发生就需要修正这些固定的地址，所以就有了重定位表。重定位表就是记录了这些需要修正的地址，在ImageBase发生改变时就会进行修正重定位表。<br>　　修正方法：需要重定位的地址 - 以前的基址 + 当前的基址。</p></blockquote><p>VirtualAddress<br>　　这个虚拟地址是一组重定位数据的开始RVA地址，只有重定位项的有效数据加上这个值才是重定位数据真正的RVA地址。<br>　　SizeOfBlock<br>　　它是当前重定位块的总大小，因为VirtualAddress和SizeOfBlock都是4字节的，所以(SizeOfBlock - 8)才是该块所有重定位项的大小，(SizeOfBlock - 8) &#x2F; 2就是该块所有重定位项的数目。<br>　　重定位项<br>　　重定位项在该结构中没有体现出来，他的位置是紧挨着这个结构的，可以把他当作一个数组，宽度为2字节，每一个重定位项分为两个部分：高4位和低12位。高4位表示了重定位数据的类型(0x00没有任何作用仅仅用作数据填充，为了4字节对齐。0x03表示这个数据是重定位数据，需要修正。0x0A出现在64位程序中，也是需要修正的地址)，低12位就是重定位数据相对于VirtualAddress的偏移，也就是上面所说的有效数据。之所以是12位，是因为12位的大小足够表示该块中的所有地址(每一个数据块表示一个页中的所有重定位数据，一个页的大小位0x1000)。</p><p>注：如果修改了EXE文件的ImageBase，就要手动修复它的重定位表，因为系统会判断程序载入地址和ImageBase是否一致，如果一致就不会自动修复重定位表，双击运行时就会报错。</p><h2 id="1-3-节表"><a href="#1-3-节表" class="headerlink" title="1.3 节表"></a>1.3 节表</h2><p>一个节表(IMAGE_SECTION_TABLE)是由很多个节(IMAGE_SECTION_HEADER)组成的，实际上是一个IMAGE_SECTION_HEADER类型的数组，数组的成员个数被定义在IMAGE_FILE_HEADER中的NumberOfSections成员</p><h3 id="1-3-1-IMAGE-SECTION-HEADER"><a href="#1-3-1-IMAGE-SECTION-HEADER" class="headerlink" title="1.3.1 IMAGE_SECTION_HEADER"></a>1.3.1 IMAGE_SECTION_HEADER</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment">#define IMAGE_SIZEOF_SHORT_NAME              8</span><br><br>typedef struct _IMAGE_SECTION_HEADER &#123;<br>  <span class="hljs-keyword">BYTE </span> Name[IMAGE_SIZEOF_SHORT_NAME]<span class="hljs-comment">;         **节区名                 偏移0x00</span><br>  union &#123;<br>    DWORD PhysicalAddress;<br>    DWORD VirtualSize<span class="hljs-comment">;                         **节区的虚拟大小          偏移0x08      重要</span><br>  &#125; Misc;                                     <br>  DWORD VirtualAddress<span class="hljs-comment">;                        **节区的虚拟地址          偏移0x0C      重要  </span><br>  DWORD SizeOfRawData<span class="hljs-comment">;                         **节区在硬盘上的大小       偏移0x10      重要</span><br>  DWORD PointerToRawData<span class="hljs-comment">;                      **节区在硬盘上的地址       偏移0x14      重要</span><br>  DWORD PointerToRelocations<span class="hljs-comment">;                  **指向重定位项开头的地址   偏移0x18</span><br>  DWORD PointerToLinenumbers<span class="hljs-comment">;                  **指向行号项开头的地址     偏移0x1C</span><br>  WORD  NumberOfRelocations<span class="hljs-comment">;                   **节区的重定位项数         偏移0x20</span><br>  WORD  NumberOfLinenumbers<span class="hljs-comment">;                   **节区的行号数            偏移0x22</span><br>  DWORD Characteristics<span class="hljs-comment">;                       **节区的属性              偏移0x24       重要</span><br>&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;<br></code></pre></td></tr></table></figure><p>　Name<br>　　这是一个8字节的ASCII字符串，长度不足8字节时用0x00填充，该名称并不遵守必须以”\0”结尾的规律，如果不是以”\0”结尾，系统会截取8个字节的长度进行处理。可执行文件不支持长度超过8字节的节名。对于支持超过字节长度的文件来说，此成员会包含斜杠(&#x2F;)，并在后面跟随一个用ASCII表示的十进制数字，该数字是字符串表的偏移量。<br>　　Misc.VirtualSize<br>　　这个成员在一个共用体中，这个共用体中还有另外一个成员，用处不大，主要是VirtualSize的含义。这个成员指定了该节区装入内存后的总大小，以字节为单位，如果此值大于SizeOfRawData的值，那么大出的部分将用0x00填充。这个成员只对可执行文件有效，如果是obj文件此成员的值为0。<br>　　VirtualAddress<br>　　指定了该节区装入内存虚拟空间后的地址，这个地址是一个相对虚拟地址(RVA)，它的值一般是SectionAlignment的整数倍。它加上ImageBase后才是真正的虚拟地址。<br>　　SizeOfRawData<br>　　指定了该节区在硬盘上初始化数据的大小，以字节为单位。它的值必须是FileAlignment的整数倍，如果小于Misc.VirtualSize，那么该部分的其余部分将用0x00填充。如果该部分仅包含未初始化的数据，那么这个值将会为零。<br>　　PointerToRawData<br>　　指出零该节区在硬盘文件中的地址，这个数值是从文件头开始算起的偏移量，也就是说这个地址是一个文件偏移地址(FOA)。它的值必须是FileAlignment的整数倍。如果这个部分仅包含未初始化的数据，则将此成员设置为零。</p><p>　　Characteristics<br>　　该成员指出了该节区的属性特征。其中的不同数据位代表了不同的属性，这些数据位组合起来就是这个节的属性特征，具体数值定义如下： </p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs dns">宏定义数值描述<br> <span class="hljs-number">0x00000001</span>保留<br> <span class="hljs-number">0x00000002</span>保留<br> <span class="hljs-number">0x00000004</span>保留<br>IMAGE_SCN_TYPE_NO_PAD<span class="hljs-number">0x00000008</span>废弃 替换为IMAGE_SCN_ALIGN_1BYTES<br> <span class="hljs-number">0x00000010</span>保留<br>IMAGE_SCN_CNT_CODE<span class="hljs-number">0x00000020</span>节中包含可执行代码。<br>IMAGE_SCN_CNT_INITIALIZED_DATA<span class="hljs-number">0x00000040</span>节中包含已初始化数据。<br>IMAGE_SCN_CNT_UNINITIALIZED_DATA<span class="hljs-number">0x00000080</span>节中包含未初始化数据。<br>IMAGE_SCN_LNK_OTHER<span class="hljs-number">0x00000100</span>保留<br>IMAGE_SCN_LNK_INFO<span class="hljs-number">0x00000200</span>节中包含注释或其他信息，对目标文件有效。<br> <span class="hljs-number">0x00000400</span>保留<br>IMAGE_SCN_LNK_REMOVE<span class="hljs-number">0x00000800</span>该节不会成为镜像文件的一部分，对目标文件有效。<br>IMAGE_SCN_LNK_COMDAT<span class="hljs-number">0x00001000</span>该节包含COMDAT数据，对目标文件有效。<br> <span class="hljs-number">0x00002000</span>保留<br>IMAGE_SCN_NO_DEFER_SPEC_EXC<span class="hljs-number">0x00004000</span>重新计算异常处理TLB项中的位<br>IMAGE_SCN_GPREL<span class="hljs-number">0x00008000</span>节中包含通过全局指针引用的数据。<br> <span class="hljs-number">0x00010000</span>保留<br>IMAGE_SCN_MEM_PURGEABLE<span class="hljs-number">0x00020000</span>保留<br>IMAGE_SCN_MEM_LOCKED<span class="hljs-number">0x00040000</span>保留<br>IMAGE_SCN_MEM_PRELOAD<span class="hljs-number">0x00080000</span>保留<br>IMAGE_SCN_ALIGN_1BYTES<span class="hljs-number">0x00100000</span>在<span class="hljs-number">1</span>字节边界上对齐数据，对目标文件有效。<br>IMAGE_SCN_ALIGN_2BYTES<span class="hljs-number">0x00200000</span>在<span class="hljs-number">2</span>字节边界上对齐数据，对目标文件有效。<br>IMAGE_SCN_ALIGN_4BYTES<span class="hljs-number">0x00300000</span>在<span class="hljs-number">4</span>字节边界上对齐数据，对目标文件有效。<br>IMAGE_SCN_ALIGN_8BYTES<span class="hljs-number">0x00400000</span>在<span class="hljs-number">8</span>字节边界上对齐数据，对目标文件有效。<br>IMAGE_SCN_ALIGN_16BYTES<span class="hljs-number">0x00500000</span>在<span class="hljs-number">16</span>字节边界上对齐数据，对目标文件有效。<br>IMAGE_SCN_ALIGN_32BYTES<span class="hljs-number">0x00600000</span>在<span class="hljs-number">32</span>字节边界上对齐数据，对目标文件有效。<br>IMAGE_SCN_ALIGN_64BYTES<span class="hljs-number">0x00700000</span>在<span class="hljs-number">64</span>字节边界上对齐数据，对目标文件有效。<br>IMAGE_SCN_ALIGN_128BYTES<span class="hljs-number">0x00800000</span>在<span class="hljs-number">128</span>字节边界上对齐数据，对目标文件有效。<br>IMAGE_SCN_ALIGN_256BYTES<span class="hljs-number">0x00900000</span>在<span class="hljs-number">256</span>字节边界上对齐数据，对目标文件有效。<br>IMAGE_SCN_ALIGN_512BYTES<span class="hljs-number">0x00A00000</span>在<span class="hljs-number">512</span>字节边界上对齐数据，对目标文件有效。<br>IMAGE_SCN_ALIGN_1024BYTES<span class="hljs-number">0x00B00000</span>在<span class="hljs-number">1024</span>字节边界上对齐数据，对目标文件有效。<br>IMAGE_SCN_ALIGN_2048BYTES<span class="hljs-number">0x00C00000</span>在<span class="hljs-number">2048</span>字节边界上对齐数据，对目标文件有效。<br>IMAGE_SCN_ALIGN_4096BYTES<span class="hljs-number">0x00D00000</span>在<span class="hljs-number">4096</span>字节边界上对齐数据，对目标文件有效。<br>IMAGE_SCN_ALIGN_8192BYTES<span class="hljs-number">0x00E00000</span>在<span class="hljs-number">8192</span>字节边界上对齐数据，对目标文件有效。<br>IMAGE_SCN_LNK_NRELOC_OVFL<span class="hljs-number">0x01000000</span>此节包含扩展的重定位信息。<br>IMAGE_SCN_MEM_DISCARDABLE<span class="hljs-number">0x02000000</span>此节可以在需要时被丢弃。<br>IMAGE_SCN_MEM_NOT_CACHED<span class="hljs-number">0x04000000</span>此节无法缓存。<br>IMAGE_SCN_MEM_NOT_PAGED<span class="hljs-number">0x08000000</span>此节无法分页。<br>IMAGE_SCN_MEM_SHARED<span class="hljs-number">0x10000000</span>此节可以在内存中共享。<br>IMAGE_SCN_MEM_EXECUTE<span class="hljs-number">0x20000000</span>此节可以作为代码执行。<br>IMAGE_SCN_MEM_READ<span class="hljs-number">0x40000000</span>此节可读。<br>IMAGE_SCN_MEM_WRITE<span class="hljs-number">0x80000000</span>此节可写。<br></code></pre></td></tr></table></figure><h2 id="1-4-实践"><a href="#1-4-实践" class="headerlink" title="1.4 实践"></a>1.4 实践</h2><h3 id="1-4-1-扩大最后节"><a href="#1-4-1-扩大最后节" class="headerlink" title="1.4.1 扩大最后节"></a>1.4.1 扩大最后节</h3><ol><li><p>在文件的最后新增4096个字节(0x1000)</p></li><li><p>修改最后一个节的SizeOfRawData和VirtualSize为N</p></li></ol><p> N &#x3D; max(SizeOfRawData, VirtualSize) + 0X1000</p><p>3.修改SizeOfImage的大小</p><p>4 为最后一个节添加可执行属性</p><p>在文件的最后新增4096个字节(0x1000)<br><img src="https://raw.githubusercontent.com/QYQS1/picture/main/test/202412101636398.png" alt="QQ_1733819786056"></p><p>修改最后一个节的SizeOfRawData和VirtualSize为N</p><p><img src="https://raw.githubusercontent.com/QYQS1/picture/main/test/202412101634336.png" alt="img"></p><p>max(5f10 , 6000 ) + 0X1000 &#x3D; 7000</p><p><img src="https://raw.githubusercontent.com/QYQS1/picture/main/test/202412101634006.png" alt="img"></p><p>修改SizeOfImage的大小</p><p>100+4(PE指纹)+14(PE标准头)+38(镜像大小的偏移) &#x3D; 150</p><p><img src="https://raw.githubusercontent.com/QYQS1/picture/main/test/202412101634506.png" alt="img"></p><p>c0000 + 1000 &#x3D; c1000</p><p><img src="https://raw.githubusercontent.com/QYQS1/picture/main/test/202412101634386.png" alt="img"></p><h3 id="1-4-2-新增节"><a href="#1-4-2-新增节" class="headerlink" title="1.4.2 新增节"></a>1.4.2 新增节</h3><p>在节表后面新增一个节，拷贝.text这个节的信息，因为我们的节和它一样也是可执行的</p><p><img src="https://raw.githubusercontent.com/QYQS1/picture/main/test/202412101636728.png" alt="QQ_1733819813989"></p><p>Name改为.abcd</p><p>VirtualSize内存中块大小:0x1000H</p><p>VirtaualAddress内存中块RVA值:最后一个节rsrc的VirtaualAddress + VirtualSize &#x3D; BA000 + 7000 &#x3D; C1000</p><p>SizeOfRawData文件中块大小:0x1000H</p><p>PointerToRawData文件中块偏移:最后一个节rsrc的PointerToRawData + SizeOfRawData &#x3D; A9000 + 7000 &#x3D; B0000</p><p>后面的和.text一样即可</p><p>修改标准PE头中的块数目(NumberOfSections) 4改成5</p><p>修改SizeOfImage的大小 原值+0x1000</p><p>在文件的最后插入0x1000字节</p>]]></content>
    
    
    <categories>
      
      <category>基础知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>re</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
